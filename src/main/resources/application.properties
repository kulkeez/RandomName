# Core properties
# Enable debug logs
debug=false 
# Enable trace logs
trace=false 

spring.application.name=random-name-generator

# Uncomment to switch to different server port. By default, Spring Boot Actuator defaults to run on port 8080
server.port: 8080
#management.port: 9001
#management.address: 127.0.0.1

#Enable shutdown endpoint since it's only visible by default via JMX; uncomment line below To enable it as an HTTP endpoint
management.endpoint.shutdown.enabled=true
management.endpoint.metrics.enabled=true
management.endpoints.enabled-by-default=true

# Customization of the Actuator /info Endpoint
info.app.name=Sample Spring Boot Application to demonstrate using H2 database. This application also registers with a Spring Boot Admin (SBA) Server
info.app.description=Spring Client Application using Spring Boot to demonstrate how to use H2 database. 
info.app.version=0.0.1
info.springboot.version=3.3.0
info.app.programmer=Vikram Kulkarni
info.app.uses=Spring Boot 2.x Actuator is used which is now technology-agnostic whereas in 1.x it was tied to MVC and Servlet stack
info.app.h2.console=http://localhost:8080/h2-console

# Actuator 2.x comes with most endpoints disabled; the only two available by default are /health and /info
management.endpoints.web.exposure.include=*
management.endpoints.web.expose=*

# configure Spring Boot to connect to an in-memory store (temporary data storage)
spring.datasource.url=jdbc:h2:mem:testdb
# To have a persistent data store capable of storing data between application start/stop, use file
#spring.datasource.url=jdbc:h2:file:/tmp/h2data
spring.datasource.username=sa
spring.datasource.password=password
spring.datasource.driver-class-name=org.h2.Driver
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect

# Enabling H2 Console
# H2 database has an embedded GUI console for browsing the contents of a database and running SQL queries
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console
spring.h2.console.settings.trace=false
spring.h2.console.settings.web-allow-others=false

# This property below will ensure that only script-based schema generation is performed using schema.sql
spring.jpa.hibernate.ddl-auto=create-drop

# set below property to true if you want to have both Hibernate automatic schema generation 
# in conjugation with script-based schema creation and data population
spring.jpa.defer-datasource-initialization=true
spring.sql.init.mode=always

# show the hibernate-generated SQL into the console
spring.jpa.show-sql=true
# format the printed SQL from JPA
spring.jpa.properties.hibernate.format_sql=true
# continue application startup in spite of any errors in data initialization
spring.datasource.continue-on-error=true

# Configure log4j logging
logging.level.root=INFO
logging.level.org.springframework=INFO
logging.level.org.springframework.boot.autoconfigure=INFO
logging.level.org.springframework.boot.web.servlet=INFO
logging.level.org.springframework.boot.web.servlet.ServletComponentRegisteringPostProcessor=DEBUG

logging.level.org.springframework.web=INFO
logging.level.org.springframework.web.client.RestTemplate=INFO
logging.level.org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping=WARN
 
logging.level.org.apache.catalina.loader=WARN
logging.level.org.apache.catalina.mapper=WARN
logging.level.org.springframework.context.support=WARN
logging.level.org.apache.tomcat.util=INFO

logging.level.org.hibernate=DEBUG
logging.level.org.springframework.orm=DEBUG
logging.level.org.hibernate.jpa=DEBUG
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.h2.jdbc=DEBUG
logging.level.org.springframework.jdbc.datasource.init=DEBUG

# Configure application specific logging 
logging.level.com.kulkeez=DEBUG
logging.level.com.kulkeez.RandomNameApplication=INFO
logging.level.com.kulkeez.controller=DEBUG

#logging.pattern.console=%highlight{%d{dd-MMM-yyyy HH:mm:ss} %c{7}:%L - %msg%n%throwable}
logging.pattern.console=%d{dd-MMM-yyyy HH:mm:ss} %-5p [%t] %c:%L - %msg%n%throwable